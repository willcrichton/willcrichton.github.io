/*
* game.js: handles most game logic
*/
// paperjs has to have this run before
// any modules can reference paper variables
// todo--better, more modular way to do this?

paper.install(window);
paper.setup('blockKong');

define(function(require) {
	'use strict';

	//INSERT IMPORTS TO OTHER FILES HERE
	var
	    Block = require('block'), 
	    Barrel = require('barrel');

	var Game = {
        start: function() {
            this.player = new Block(view.bounds.center); //make block object
            this.score = 0;
            this.started = true;
        },

	end: function() {//idk what the first two lines do
            document.getElementById('dialogue').style.display = 'block';
            document.getElementById('score').innerHTML = 'Your score was ' + this.score;
            this.started = false;
        },

	loop: function(e) {

            if (!this.started) {
                return;
            }

            var player = this.player;

            // handle keyboard events for moving your character
	    if (Key.isDown('w') || Key.isDown('up')) { //must change position
                player.position += new Point(0,-5);
            } else if (Key.isDown('s') || Key.isDown('down')) {
                player.position += new Point(0, 5);
            }

            if (Key.isDown('a') || Key.isDown('left')) {
                player.position += new Point(-5, 0);
            } else if (Key.isDown('d') || Key.isDown('right')) {
		player.position += new Point(5,0);
            }

	    // do simple 2D physics for the player
	    // calculate velocity with deceleration
	    
	    // var playerBounds = player.strokeBounds;

	    //CHECKS TO MAKE SURE PLAYER DOESN'T MOVE IN WEIRD WAYS
	    //if (!view.bounds.contains(playerBounds)) {

                /*// fixme: player can still get stuck. detection isn't
		var nx = playerBounds.width / 2, ny = playerBounds.height / 2;
                if ((player.position.x <= nx && player.velocity[0] < 0) ||
                    (player.position.x >= view.bounds.width - nx && player.velocity[0] > 0)) {
                    player.velocity[0] = 0;
                } else if((player.position.y <= ny && player.velocity[1] < 0) ||
                          (player.position.y >= view.bounds.height - ny && 
			   player.velocity[1] > 0)) {
                    player.velocity[1] = 0;
                }
            }
		*/

	    };

	};  
  
	view.onFrame = _.bind(Game.loop, Game);	
	return Game;
       
    });

